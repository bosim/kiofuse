TODO
-----

- Investigate why it sometimes crashes after ctrl-c.

- Safely abort and deny future requests instead of Q_ASSERT.

- Search and eliminate empty while loops.

- Make KIO slaves deal with named pipes.

- Make slaves' seek() always return the _real_ position instead of the requested one.

- Fix assert if pos != requested.

- Remove kio_smb_moount.cpp

- FIXME deprecated use smbc_setOption*() functions instead.

- SMB KIO slave reads errno multiple times for the same operation, when in fact only the first read yields the correct error. Find other places in KDE where errno is used incorrectly.

- smbc_lseek returns a result different from the requested offset.

- If error, while in Read or Write add FHID or Mutex to terminatedList. In ReleaseJob, lock and unlock the JobMutex immediately after each other so that I'm certain that ReleaseJob has the mutex and that no one else is wating for it.

Are threads always granted lock on a mutex in the order in which the threads requested that lock?
For example, assume a mutex starts out locked at second 0.  Also assume that thread1 calls mutex->lock() at second 1, thread2 calls mutex->lock() at second 2, and thread3 calls mutex->lock() at second 3. Now at second 9 the mutex is unlocked. Can I be sure that the order in which the threads receive the lock is thread1, then thread2, and then thread3?


- Determine whether or not to emit mimetype in IO-slaves and when to do it (open or first read). Also, is mimetype necessary if we're opening the file in write-only mode?

- Transform helpers and event loops from pointers to references, and remove delete statements.

- Cleanup: Might need to add removeSubjob(job) after setErrorText( job->errorText() ) in  FileCopyJob::slotResult() in job.cpp.

- If kio_file fails to write, it should can written(0) not just hang.

- Put conversion between POSIX open modes and QIODevice in kdelibs.

- There should be an error KIO::ERR_ALREADY_CLOSED.

- KIO::file_move ignores the permissions parameter.

- See whether there is a race condition if BaseJobHelper::jobDone() is called before the data is properly stored.

- Ask Carewolf why FileJob::data() gets called twice (second time carrying an empty array) for each ::read() request and why ::position() gets called twice for each ::seek(). About every three ::read() requests, the ::data() signal is not called at all.

- Also, ask Carewolf whether the KJob::result signal is used.

- Convert KIO errors to POSIX errors

- Make sure to remember the owners of the handles.

- Don't delete a handle with a fh.

- Find out why the baseUrl has to be a file (as opposed to a directory)

- Find out if the parent directory is ever stat-ed (ie. the relPath in kioFuseGetAttr is ever ".."). If so, we need to get its info using lstat().

- Find out how to make mounts created by one user accessible to other users. The "allow_others" FUSE option might work.

- Find a Qt or KDE-based method of caching KFileItem objects in a FS tree.

- Can a subdirectory of a FUSE mounpoint be a mountpoint itself?

- Implement periodic removal of cashed items that have expired.

- Implement the interface for extracting file/directory information from the cache.

- Fix CMakeLists.txt so that FUSE is only linked to kiofuse.h and not to all the other source files. Currently, the following warning appears for the other files:
        c++: -lfuse: linker input file unused because linking not done
 
- Implement more filesystem operations in kiofuseops.h

- Make KIO aware of KioFuse mountpoints so that it doesn't use them, but uses KIO slaves directly. Libfusi (http://www.scheinwelt.at/~norbertf/devel/fusi) would come in handy for keeping track of mountpoints and converting local paths <---> remote paths.

- Integrate KioFuse into the KNetAttach GUI.

- write documentation


Long-term TODO:

- FUSE takes the liberty to rename temporary files (.fuse_hidden0000000d00000001) on the server and assign them the same fileHandleId.

- FTruncate only possible once KIO gets truncate method.

- KIO::open() using O_WRONLY deletes and replaces the existing file. POSIX open() doesn't do that. KIO::open() using O_RDWR causes subsequent writes to append to the beginning. POSIX open() using O_RDWR or O_WRONLY replaces characters at the beginning.

- Make permission checking in KIO reliable for network slaves (POSIX access). For example, KFileItem::isWritable() should check the /etc/group file on the remote server to ensure that the user we are connecting with is a member of a group that has write permission. This will allow KioFuse to display the effective permission on the client side (currently KioFuse just copies the remote stat, which is not applicable to the local system).

- KIO should be usable from non-main threads

- Fix inconsistancy whereby ListJob returns its UDSEntries via the entries() signal, while StatJob returns its UDSEntries via the statResult() function

- Synch commands via NetAccess require a GUI and don't allow KIO::HideProgressInfo.

- Take ideas from GVFS and GIO

Contact
--------

Vlad Codrea, VladC6 yahoo com
